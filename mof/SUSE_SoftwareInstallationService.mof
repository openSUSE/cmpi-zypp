//#pragma namespace ("root/cimv2")


// -------------------------------------------------------------------
// *******************************************************************
//      Classes
// *******************************************************************
// -------------------------------------------------------------------



// ===================================================================
//      SUSE_SoftwareInstallationService
// ===================================================================

[ Provider("cmpi:cmpi-zypp"),
  Description ("A Class which provide a SoftwareInstallationService.")
]
class SUSE_SoftwareInstallationService : CIM_SoftwareInstallationService
{
      [Description (
          "Refresh all enabled repositories and load the new metadata into the pool."),
       ValueMap { "0", "1", ".." },
       Values { "Completed with no Errors", "Error", "Vendor Specific" }]
   uint32 RefreshAllRepositories(
          [IN, Description (
              "Refresh Policy"),
           ValueMap { "0", "1", "2" },
           Values { "RefreshIfNeeded", "RefreshForced", "RefreshIfNeededIgnoreDelay" }]
       uint16 RefreshPolicy);

       [Override, Description (
       "Start a job to install or update a SoftwareIdentity "
       "(Source) on a ManagedElement (Target). \n"
       "In addition the method can be used to add the "
       "SoftwareIdentity simulataneously to a specified "
       "SofwareIndentityCollection. A client MAY specify either "
       "or both of the Collection and Target parameters. The "
       "Collection parameter is only supported if "
       "SoftwareInstallationService.CanAddToCollection is TRUE. \n"
       "If 0 is returned, the function completed successfully "
       "and no ConcreteJob instance was required. If 4096/0x1000 "
       "is returned, a ConcreteJob will be started to perform "
       "the install. The Job\'s reference will be returned in "
       "the output parameter Job." ),
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096",
       "4097", "4098", "4099", "4100", "4101", "4102", "4103",
       "4104", "4105", "4106", "4107", "4108", "4109..32767",
       "32768..65535" },
       Values { "Job Completed with No Error", "Not Supported",
       "Unspecified Error", "Timeout", "Failed",
       "Invalid Parameter", "Target In Use", "DMTF Reserved",
       "Method Parameters Checked - Job Started",
       "Unsupported TargetType",
       "Unattended/silent installation not supported",
       "Downgrade/reinstall not supported", "Not enough memory",
       "Not enough swap-space", "Unsupported version transition",
       "Not enough disk space",
       "Software and target operating system mismatch",
       "Missing dependencies", "Not applicable to target",
       "No supported path to image", "Cannot add to Collection",
       "Method Reserved", "Vendor Specific" }]
       uint32 InstallFromSoftwareIdentity(
       [IN ( false ), OUT, Description (
       "Reference to the job (may be null if job completed)."
       )]
       CIM_ConcreteJob REF Job,
        [IN, Description (
        "Options to control the install process.\n"
        "Defer target/system reset : do not automatically "
        "reset the target/system.\n"
        "Force installation : Force the installation of the "
        "same or an older SoftwareIdentity.Install: Perform "
        "an installation of this software on the managed element.\n"
        "Update: Perform an update of this software on the "
        "managed element.\n"
        "Repair: Perform a repair of the installation of "
        "this software on the managed element by forcing "
        "all the files required for installing the software "
        "to be reinstalled.\n"
        "Reboot: Reboot or reset the system immediately "
        "after the install or update of this software, if "
        "the install or the update requires a reboot or reset.\n"
        "Password: Password will be specified as clear text "
        "without any encryption for performing the install "
        "or update.\n"
        "Uninstall: Uninstall the software on the managed element.\n"
        "Log: Create a log for the install or update of the software.\n"
        "SilentMode: Perform the install or update without "
        "displaying any user interface.\n"
        "AdministrativeMode: Perform the install or update "
        "of the software in the administrative mode. "
        "Solve Dependencies: let the system find out the dependencies "
        "and install or update all dependend SoftwareIdentities."),
        ValueMap { "2", "3", "4", "5", "6", "7", "8", "9",
        "10", "11", "12", "..", "32768", "32769..65535" },
        Values { "Defer target/system reset",
        "Force installation", "Install", "Update", "Repair",
        "Reboot", "Password", "Uninstall", "Log",
        "SilentMode", "AdministrativeMode", "DMTF Reserved",
        "Solve Dependencies"
        "Vendor Specific" },
        ArrayType ( "Indexed" ),
        ModelCorrespondence {
          "CIM_SoftwareInstallationService.InstallOptionsValues[]",
        "CIM_SoftwareInstallationServiceCapabilities.SupportedInstallOptions[]" }]
        uint16 InstallOptions[],
        [IN, Description (
        "InstallOptionsValues is an array of strings "
        "providing additional information to InstallOptions "
        "for the method to install the software. Each entry "
        "of this array is related to the entry in "
        "InstallOptions that is located at the same index "
        "providing additional information for "
        "InstallOptions. \n"
        "If the index in InstallOptions has the value "
        "\"Password \" then a value at the corresponding "
        "index of InstallOptionValues shall not be NULL. \n"
        "If the index in InstallOptions has the value \"Log "
        "\" then a value at the corresponding index of "
        "InstallOptionValues may be NULL. \n"
        "If the index in InstallOptions has the value "
        "\"Defer target/system reset\", \"Force "
        "installation\",\"Install\", \"Update\", \"Repair\" "
        "or \"Reboot\" then a value at the corresponding "
        "index of InstallOptionValues shall be NULL." ),
        ArrayType ( "Indexed" ),
        ModelCorrespondence {
          "CIM_SoftwareInstallationService.InstallOptions[]" }]
          string InstallOptionsValues[],
        [IN, Description (
        "Reference to the source of the install." )]
        CIM_SoftwareIdentity REF Source,
        [IN, Description (
        "The installation target. If NULL then the "
        "SOftwareIdentity will be added to Collection only. "
        "The underlying implementation is expected to be "
        "able to obtain any necessary metadata from the "
        "Software Identity." )]
        CIM_ManagedElement REF Target,
        [IN, Description (
        "Reference to the Collection to which the Software "
        "Identity SHALL be added. If NULL then the SOftware "
        "Identity will not be added to a Collection." )]
        CIM_Collection REF Collection);



       [Description (
       "Start a job to install or update a list of SoftwareIdentities "
       "(Source) on a ManagedElement (Target). \n"
       "In addition the method can be used to add the "
       "SoftwareIdentity simulataneously to a specified "
       "SofwareIndentityCollection. A client MAY specify either "
       "or both of the Collection and Target parameters. The "
       "Collection parameter is only supported if "
       "SoftwareInstallationService.CanAddToCollection is TRUE. \n"
       "If 0 is returned, the function completed successfully "
       "and no ConcreteJob instance was required. If 4096/0x1000 "
       "is returned, a ConcreteJob will be started to perform "
       "the install. The Job\'s reference will be returned in "
       "the output parameter Job." ),
         ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096",
         "4097", "4098", "4099", "4100", "4101", "4102", "4103",
         "4104", "4105", "4106", "4107", "4108", "4109..32767",
         "32768..65535" },
         Values { "Job Completed with No Error", "Not Supported",
         "Unspecified Error", "Timeout", "Failed",
         "Invalid Parameter", "Target In Use", "DMTF Reserved",
         "Method Parameters Checked - Job Started",
         "Unsupported TargetType",
         "Unattended/silent installation not supported",
         "Downgrade/reinstall not supported", "Not enough memory",
         "Not enough swap-space", "Unsupported version transition",
         "Not enough disk space",
         "Software and target operating system mismatch",
         "Missing dependencies", "Not applicable to target",
         "No supported path to image", "Cannot add to Collection",
         "Method Reserved", "Vendor Specific" }]
         uint32 InstallFromSoftwareIdentities(
         [IN ( false ), OUT, Description (
         "Reference to the job (may be null if job completed)."
         )]
         CIM_ConcreteJob REF Job,
         [IN, Description (
         "Options to control the install process.\n"
         "Defer target/system reset : do not automatically "
         "reset the target/system.\n"
         "Force installation : Force the installation of the "
         "same or an older SoftwareIdentity.Install: Perform "
         "an installation of this software on the managed element.\n"
         "Update: Perform an update of this software on the "
         "managed element.\n"
         "Repair: Perform a repair of the installation of "
         "this software on the managed element by forcing "
         "all the files required for installing the software "
         "to be reinstalled.\n"
         "Reboot: Reboot or reset the system immediately "
         "after the install or update of this software, if "
         "the install or the update requires a reboot or reset.\n"
         "Password: Password will be specified as clear text "
         "without any encryption for performing the install "
         "or update.\n"
         "Uninstall: Uninstall the software on the managed element.\n"
         "Log: Create a log for the install or update of the software.\n"
         "SilentMode: Perform the install or update without "
         "displaying any user interface.\n"
         "AdministrativeMode: Perform the install or update "
         "of the software in the administrative mode. "
         "Solve Dependencies: let the system find out the dependencies "
         "and install or update all dependend SoftwareIdentities."),
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9",
                     "10", "11", "12", "..", "32768", "32769..65535" },
          Values { "Defer target/system reset",
                   "Force installation", "Install", "Update", "Repair",
                   "Reboot", "Password", "Uninstall", "Log",
                   "SilentMode", "AdministrativeMode", "DMTF Reserved",
                   "Solve Dependencies"
                   "Vendor Specific" },
          ArrayType ( "Indexed" ),
          ModelCorrespondence {
            "CIM_SoftwareInstallationService.InstallOptionsValues[]",
            "CIM_SoftwareInstallationServiceCapabilities.SupportedInstallOptions[]" }]
          uint16 InstallOptions[],
          [IN, Description (
          "InstallOptionsValues is an array of strings "
          "providing additional information to InstallOptions "
          "for the method to install the software. Each entry "
          "of this array is related to the entry in "
          "InstallOptions that is located at the same index "
          "providing additional information for "
          "InstallOptions. \n"
          "If the index in InstallOptions has the value "
          "\"Password \" then a value at the corresponding "
          "index of InstallOptionValues shall not be NULL. \n"
          "If the index in InstallOptions has the value \"Log "
          "\" then a value at the corresponding index of "
          "InstallOptionValues may be NULL. \n"
          "If the index in InstallOptions has the value "
          "\"Defer target/system reset\", \"Force "
          "installation\",\"Install\", \"Update\", \"Repair\" "
          "or \"Reboot\" then a value at the corresponding "
          "index of InstallOptionValues shall be NULL." ),
          ArrayType ( "Indexed" ),
          ModelCorrespondence {
            "CIM_SoftwareInstallationService.InstallOptions[]" }]
          string InstallOptionsValues[],
          [IN, Description (
             "Reference to the source of the install." )]
          CIM_SoftwareIdentity REF Source[],
          [IN, Description (
          "The installation target. If NULL then the "
          "SOftwareIdentity will be added to Collection only. "
          "The underlying implementation is expected to be "
          "able to obtain any necessary metadata from the "
          "Software Identity." )]
          CIM_ManagedElement REF Target,
          [IN, Description (
          "Reference to the Collection to which the Software "
          "Identity SHALL be added. If NULL then the SOftware "
          "Identity will not be added to a Collection." )]
          CIM_Collection REF Collection);
};


